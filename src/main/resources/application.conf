serviceLogParserJob {

  input {
    topic: "input"
  }

  output {
    topic: "output"
  }

  appParams {
    orgMapFile: ${java.io.tmpdir}/orgfile.csv
  }

  streaming {
    windowDuration: 30s
    slideDuration: 5s
    batchDuration: 5s
    checkpointDir: ${java.io.tmpdir}/checkpoint/
    shutdownMarker: ${java.io.tmpdir}/stopMarker
  }

  spark {
    "spark.master": "local[*]"
    "spark.app.name": "example-spark-kafka"
    "spark.streaming.stopGracefullyOnShutdown": true
    "spark.streaming.receiver.writeAheadLog.enable": false
  }

  kafkaSource {
    // kafka brokers
    "bootstrap.servers": "localhost:9092"
    // kafka deserializer
    "key.deserializer": "org.apache.kafka.common.serialization.StringDeserializer"
    // kafka deserializer
    "value.deserializer": "org.apache.kafka.common.serialization.StringDeserializer"
    // kafka group id
    "group.id": "example"
    "enable.auto.commit": false
    // start from the latest messages (at most once)
    "auto.offset.reset": "latest"
  }

  kafkaSink {
    // kafka bootstrap
    "bootstrap.servers": "localhost:9092"
    // kafka key serializer
    "key.serializer": "org.apache.kafka.common.serialization.StringSerializer"
    // kafka key serializer
    "value.serializer": "org.apache.kafka.common.serialization.StringSerializer"
    // ack from all in-sync replicas
    "acks": "all"
  }
}
